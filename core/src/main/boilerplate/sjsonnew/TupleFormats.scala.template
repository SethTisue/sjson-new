/*
 * Original implementation (C) 2009-2011 Debasish Ghosh
 * Adapted and extended in 2011 by Mathias Doenitz
 * Adapted and extended in 2016 by Eugene Yokota
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sjsonnew

trait TupleFormats {
  private[this] type JF[A] = JsonFormat[A] // simple alias for reduced verbosity

  [#implicit def tuple1Format[[#A1#]](implicit [#A1: JF[A1]#]): JF[Tuple1[[#A1#]]] = new RootJsonFormat[Tuple1[[#A1#]]] {

    def write[J](t: Tuple1[[#A1#]], builder: Builder[J]): Unit = {
      builder.beginArray()
      [#A1.write(t._1, builder)#
      ]
      builder.endArray()
    }
    def read[J](jsOpt: Option[J], unbuilder: Unbuilder[J]): Tuple1[[#A1#]] =
      jsOpt match {
        case Some(js) =>
          unbuilder.beginArray(js)
          [#val a1 = unbuilder.nextElement#
          ]
          val xs = Tuple1([#A1.read(Some(a1), unbuilder)#])
          unbuilder.endArray()
          xs
        case None =>
          val xs = Tuple1([#A1.read(None, unbuilder)#])
          xs
      }
  }#
  ]
}
